#!/usr/bin/env python3
import base64
import datetime
import hashlib
import os.path
import string
import sys
import tempfile

from fpdf import FPDF
from font import FONT_REGULAR, FONT_BOLD

printable = string.ascii_letters + string.digits + string.punctuation


def replace_char(c):
    if c == ' ':
        return '·'
    if c == '\n':
        return '¶'
    return r'¿{0:02x}'.format(ord(c))


def unprintable_escape(s):
    return ''.join(c if c in printable else replace_char(c) for c in s)


def build_pdf(fpath):
    fname = os.path.basename(fpath)
    pdfname = fname + ".pdf"
    with open(fpath, "rb") as f:
        raw = f.read()
        l = len(raw)
        sha = hashlib.sha256(raw).hexdigest()
    with open(fpath, "r") as f:
        lines = f.readlines()
    # if file ends on newline, `readlines()` omits last line, so add it:
    if lines[-1][-1] == '\n':
        lines.append("")

    pdf = FPDF()

    with tempfile.NamedTemporaryFile() as regular, tempfile.NamedTemporaryFile() as bold:
        font = "Font"
        # make sure, fonts are available in system:
        # fpdf needs them to be files, so we put them in tmp files
        # (will be deleted after pdf is written)
        # this hack will not work under windows, as you cannot open the files twice there
        regular.write(base64.b64decode(FONT_REGULAR))
        pdf.add_font('Font', '', regular.name, uni=True)
        bold.write(base64.b64decode(FONT_BOLD))
        pdf.add_font('Font', 'B', bold.name, uni=True)

        pdf.add_page()

        pdf.set_font(font, style="B", size=10)
        pdf.set_x(6)
        pdf.cell(0, 4, "   === File printout ===")
        pdf.ln()
        pdf.set_font(font, style="", size=10)
        pdf.set_x(6)
        pdf.cell(0, 4, "   File name:   \"%s\"" % fname)
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, "   File size:   %d bytes" % l)
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, "   File sha256: %s" % sha)
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, "   Printed:     %s" % datetime.datetime.now().replace(microsecond=0).isoformat())
        pdf.ln()
        pdf.ln()

        pdf.set_font(font, style="", size=10)
        pdf.set_x(6)
        pdf.cell(0, 4, "   Line numbers (bold) are not part of the file.")
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, '   Printable bytes are printed as their ASCII char.')
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, '   Spaces (0x20) are printed as "·", newlines (0x0a) are printed as "¶".')
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, '   All other bytes are printed as "¿xx", where "xx" is hex value of the byte,')
        pdf.ln()
        pdf.set_x(6)
        pdf.cell(0, 4, '   e.g. "¿09" for a tab, "¿0d" for a carriage return.')
        pdf.ln()
        pdf.ln()

        pdf.set_font(font, style="B", size=10)
        pdf.set_x(6)
        pdf.cell(0, 4, "   ================ BEGIN OF FILE =================================================")
        pdf.ln()

        pdf.set_font(font, style="B", size=10)
        tw = pdf.get_string_width("01 ")
        for n, line in enumerate(lines):
            line = unprintable_escape(line)
            pdf.set_x(6)
            pdf.set_font(font, style="B", size=10)
            pdf.cell(tw, 4, "%02d " % (n+1))
            pdf.set_font(font, size=10)
            pdf.cell(0, 4, line)
            pdf.ln()
        pdf.set_font(font, style="B", size=10)
        pdf.set_x(6)
        pdf.cell(0, 4, "   ================  END OF FILE  =================================================")
        pdf.ln()
        pdf.output(pdfname)


if __name__ == "__main__":
    if len(sys.argv) == 2:
        build_pdf(sys.argv[1])
    else:
        print("txt4print v0.1 Basic text file printing tool")
        print("Create a pdf for printing out files so that they can be recovered.")
        print("See https://github.com/lobaro/txt4print for more information.")
        print("This will only work with small text files with short lines.")
        print("Usage: %s <filename>" % sys.argv[0])
